// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://suggestions.gg/terms",
        "contact": {
            "name": "Suggestions",
            "url": "https://suggestions.bot/discord",
            "email": "hello@suggestions.gg"
        },
        "license": {
            "name": "AGPL-3.0",
            "url": "https://github.com/suggestionsbot/lists/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/guilds": {
            "get": {
                "description": "The most recently posted guild and shard count in the database is returned as well as the timestamp of when this data was committed. This data reflects the guild count on the active bot lists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get the recent guild count from the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The required API key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/main.GuildCountResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ResponseHTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "The guild count and shard count are persisted to the database then posted to all active bot lists set in the config.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Post guild stats to bot lists and persist them in the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The required API key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body to pass in.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.GuildCountRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/main.GuildCountResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/main.ResponseHTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/services": {
            "get": {
                "description": "This function returns the timestamp of when guild stats were lasted committed to the database as well as an overview of all information from bot lists that are marked active via the config.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get all active lists the bot is on.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The required API key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/main.BotListServicesResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ResponseHTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/services/{service}": {
            "get": {
                "description": "This function returns the timestamp of when guild stats were lasted committed to the database as well as an overview of the specific bot list the bot is on.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Get a single list the bot is on.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The required API key",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The bot list service to get information from.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.ResponseHTTP"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/main.BotListServicesResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.ResponseHTTPError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/main.InvalidServiceError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/main.ResponseHTTPError"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/main.DefaultFiberError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.BotListServiceResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "guild_count": {
                    "type": "integer",
                    "example": 50000
                },
                "short_name": {
                    "type": "string",
                    "example": "topgg"
                },
                "url": {
                    "type": "string",
                    "example": "https://top.gg"
                }
            }
        },
        "main.BotListServicesResponse": {
            "type": "object",
            "properties": {
                "last_updated": {
                    "type": "integer",
                    "example": 1671940391185
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.BotListServiceResponse"
                    }
                }
            }
        },
        "main.DefaultFiberError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "missing or malformed API Key"
                }
            }
        },
        "main.GuildCountRequestBody": {
            "type": "object",
            "required": [
                "guild_count",
                "shard_count"
            ],
            "properties": {
                "dry_run": {
                    "type": "boolean",
                    "example": true
                },
                "guild_count": {
                    "type": "integer",
                    "example": 50000
                },
                "shard_count": {
                    "type": "integer",
                    "example": 50
                }
            }
        },
        "main.GuildCountResponse": {
            "type": "object",
            "properties": {
                "dry_run": {
                    "type": "boolean",
                    "example": false
                },
                "guild_count": {
                    "type": "integer",
                    "example": 50000
                },
                "shard_count": {
                    "type": "integer",
                    "example": 50
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1671940391185
                }
            }
        },
        "main.InvalidServiceError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "The service 'memelist' is not a valid service."
                }
            }
        },
        "main.ResponseHTTP": {
            "type": "object",
            "properties": {
                "data": {},
                "nonce": {
                    "type": "integer",
                    "example": 1671940391185
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "main.ResponseHTTPError": {
            "type": "object",
            "properties": {
                "data": {},
                "nonce": {
                    "type": "integer",
                    "example": 1671940391185
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        }
    },
    "tags": [
        {
            "description": "All routes for the service.",
            "name": "General"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Suggestions Lists",
	Description:      "The API key used to secure all API routes, preventing unauthorized access.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
